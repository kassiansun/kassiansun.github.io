<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Kassian Sun</title><link>https://kassiansun.github.io/posts/</link><description>Recent content in Posts on Kassian Sun</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 16 Sep 2022 15:16:23 +0800</lastBuildDate><atom:link href="https://kassiansun.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Travesal Through The Go Compiler, Part 2</title><link>https://kassiansun.github.io/posts/go-source-code-part-2/</link><pubDate>Fri, 16 Sep 2022 15:16:23 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-2/</guid><description>Builder.build Builder.build generate an archive for a single package.
Builder.build gets building information from two sources: internal/cfg package. It contains some global variables saving build flags. load.Package. It contains information for the current building package. Builder.build will build a need flag, finish the step and uncheck the finished bits one by one. Set up caching information by action, its package, and package&amp;rsquo;s target. Set up objects output directory. Setup cgo cache &amp;amp; vet cache.</description></item><item><title>Traversal Through The Go Compiler, Part 1</title><link>https://kassiansun.github.io/posts/go-source-code-part-1/</link><pubDate>Thu, 15 Sep 2022 08:48:31 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-1/</guid><description>Set Up the Environment vim-go doesn&amp;rsquo;t support travesal through the go source code, so I switch to vscode and it works out of box (with Go plugin &amp;amp;&amp;amp; gopls installed).
Start Point (go run) File: src/cmd/go/main.go Declaration: run.CmdRun Function: run.runRun Key data structures: build.Context work.Builder load.Package work.Action The runRun function will go through several stages:
Check shouldUseOutsideModuleMode. This procedure is used by go run cmd@version work.BuildInit. This will setup the build context: Initialize modload module.</description></item><item><title>Why You Shouldn't Save Sessions in Redis Anymore</title><link>https://kassiansun.github.io/posts/why-dont-use-session-in-cache/</link><pubDate>Sat, 12 Mar 2022 17:43:32 +0800</pubDate><guid>https://kassiansun.github.io/posts/why-dont-use-session-in-cache/</guid><description>Sessions are important Security is an important factor of a reliable system, and from a user&amp;rsquo;s perspective, sessions are where the secure process starts. Sessions are no longer a volatile string saved in Redis/memcached, but a key to everything owned by users. Expiration time, login IP, login device, and many other properties of sessions should be tracked and managed properly.
The importance of sessions makes the cache an improper choice: the nature of caching means you shouldn&amp;rsquo;t put anything important in it.</description></item><item><title>A Glide Helper for Jetpack Compose</title><link>https://kassiansun.github.io/posts/jetpack-glide-helper/</link><pubDate>Mon, 03 Jan 2022 10:31:26 +0800</pubDate><guid>https://kassiansun.github.io/posts/jetpack-glide-helper/</guid><description>The design of Jetpack Compose makes an important assumption on the rendering process: the developer should not assume whether or not a composable will render, and how it will render. So any code inside a composable can be called by [0-N] times. That&amp;rsquo;s why Compose introduced several helpers to control the code execution of composable (instead of controlling the rendering process):
remember makes a state persisted among recomposition. The state will be destroyed if the composable is removed from Composition.</description></item><item><title>Introducing Tailwind CSS to My React Project</title><link>https://kassiansun.github.io/posts/introduce-tailwind-to-react/</link><pubDate>Sat, 25 Dec 2021 11:34:15 +0800</pubDate><guid>https://kassiansun.github.io/posts/introduce-tailwind-to-react/</guid><description>Why Tailwind CSS is good? Recently, I picked up the frontend project at the current company. Compared with traditional MVC-style native development, the web development feels more natural to me: declarative, MVVM, state flow, etc. But if we compare the react/vue with SwiftUI/Jetpack Compose, there&amp;rsquo;s a key pain point: styling. With SwiftUI/Jetpack Compose, the styling is part of view declaration, which makes it easy to read and maintain.
Traditionally, CSS &amp;amp; HTML are separated from each other, and there&amp;rsquo;re several practices to organize them.</description></item><item><title>Fix GCC 11 Missing Headers on Mac OS Monterey</title><link>https://kassiansun.github.io/posts/gcc-missing-headers/</link><pubDate>Wed, 08 Dec 2021 19:10:30 +0800</pubDate><guid>https://kassiansun.github.io/posts/gcc-missing-headers/</guid><description>Encountered this issue trying to compile a simple &amp;ldquo;Hello World&amp;rdquo; program with gcc-11 from homebrew. The compiler complained about fatal error: _stdio.h: No such file or directory. After some investigation, this was caused by wrong building configuration for gcc:
$ gcc -v Using built-in specs. COLLECT_GCC=gcc-11 COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc/11.2.0_3/libexec/gcc/aarch64-apple-darwin21/11/lto-wrapper Target: aarch64-apple-darwin21 Configured with: ../configure --prefix=/opt/homebrew/Cellar/gcc/11.2.0_3 --libdir=/opt/homebrew/Cellar/gcc/11.2.0_3/lib/gcc/11 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-11 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion=&amp;#39;Homebrew GCC 11.2.0_3&amp;#39; --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --build=aarch64-apple-darwin21 --with-system-zlib --disable-multilib --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX12.</description></item><item><title>Quick Start Guide with create-react-app (TypeScript + Eslint + Prettier)</title><link>https://kassiansun.github.io/posts/create-react-app-typescript-eslint/</link><pubDate>Thu, 02 Dec 2021 12:13:43 +0800</pubDate><guid>https://kassiansun.github.io/posts/create-react-app-typescript-eslint/</guid><description>Why use create-react-app Originally I was using a manually written webpack script to build my react project. The reason was to reduce the length of package-lock.json. But as I&amp;rsquo;m diving deeper into the frontend ecosystem, it doesn&amp;rsquo;t look like a good choice to wait for frontend guys fixing the dependency hell. So instead of waiting for a neat solution, I need to find a quick solution.
As part of the lessons I learned from handwriting webpack scripts, it&amp;rsquo;s hard to build a complete and reusable scaffold to build a React.</description></item><item><title>Migrate From Bash to Zsh</title><link>https://kassiansun.github.io/posts/migrate-from-bash-to-zsh/</link><pubDate>Sun, 28 Nov 2021 10:14:21 +0800</pubDate><guid>https://kassiansun.github.io/posts/migrate-from-bash-to-zsh/</guid><description>The story of bash and my taste on command line I&amp;rsquo;ve been using bash as the development environment for a long time. The reason for choosing bash is its ubiquity. Most desktop &amp;amp; server Linux distributions and Docker images will ship with bash, which makes it a great fit for a configure-once-use-everywhere development environment. So you write it once and copy it to every host you&amp;rsquo;ll write code on. But since ~2014 my bash configuration has degraded several times, for two major reasons:</description></item><item><title>Hugo on Github Pages Returns 404</title><link>https://kassiansun.github.io/posts/hugo-404-github-pages/</link><pubDate>Mon, 22 Nov 2021 11:59:11 +0800</pubDate><guid>https://kassiansun.github.io/posts/hugo-404-github-pages/</guid><description>Although followed the official documentation and got it built correctly, the GitHub page still returns 404. After some investigation with Branches and Pages settings of my GitHub repository, I realize that built means a different thing for GitHub. Since the pages are built by Hugo, GitHub doesn&amp;rsquo;t build the page anymore (unlike the Jekyll I used before). So the source branch shouldn&amp;rsquo;t be master, but gh-pages, after switching Source to the correct branch, it works now.</description></item><item><title>Hugo Extended Mode on Github Pages</title><link>https://kassiansun.github.io/posts/hugo-extended-github-pages/</link><pubDate>Mon, 22 Nov 2021 11:35:34 +0800</pubDate><guid>https://kassiansun.github.io/posts/hugo-extended-github-pages/</guid><description>When I was trying to push this repository to GitHub, by following the Quick Start and Host on GitHub, GitHub actions failed to build with this error message:
Error: Error building site: TOCSS: failed to transform &amp;#34;ananke/css/main.css&amp;#34; (text/css). Check your Hugo installation; you need the extended version to build SCSS/SASS.: this feature is not available in your current Hugo version, see https://goo.gl/YMrWcn for more information So the answer is simple, comment the #extended: true in .</description></item><item><title>Hello Word</title><link>https://kassiansun.github.io/posts/hello-word/</link><pubDate>Mon, 22 Nov 2021 11:03:54 +0800</pubDate><guid>https://kassiansun.github.io/posts/hello-word/</guid><description>Yes, this is my first post.
Recently I&amp;rsquo;m reading &amp;lt;Own Your Tech Career&amp;gt;, the idea of the book is great. Although I don&amp;rsquo;t know the author personally, we share many same thoughts on technology, career, and life. The most important thing I learned is how to get engaged in communities &amp;amp; build a personal brand. One thing is writing personal blogs, so here it is.
To be honest, I didn&amp;rsquo;t create this website by blindly following another guy&amp;rsquo;s idea.</description></item></channel></rss>