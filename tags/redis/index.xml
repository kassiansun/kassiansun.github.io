<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Redis on Kassian Sun</title><link>https://blog.kassiansun.com/tags/redis/</link><description>Recent content in Redis on Kassian Sun</description><generator>Hugo -- 0.147.3</generator><language>en</language><lastBuildDate>Sat, 26 Nov 2022 10:15:35 +0800</lastBuildDate><atom:link href="https://blog.kassiansun.com/tags/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis Internal: Hash Types</title><link>https://blog.kassiansun.com/posts/redis-hash/</link><pubDate>Sat, 26 Nov 2022 10:15:35 +0800</pubDate><guid>https://blog.kassiansun.com/posts/redis-hash/</guid><description>&lt;h2 id="the-generic-hash-implementation">The Generic Hash Implementation&lt;/h2>
&lt;ul>
&lt;li>Code Path: &lt;code>src/t_hash.c&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The generic hash type is a wrapper around &lt;code>listpack&lt;/code> and &lt;code>dict&lt;/code>, it will switch between two different
implementation and call the routines accordingly.&lt;/p>
&lt;h2 id="listpack-implementation">Listpack Implementation&lt;/h2>
&lt;ul>
&lt;li>Code Path: &lt;code>src/listpack.c&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Listpack is a densed storage of a series of keys and values, it supports storing both integers and strings.
If the hash size is lower than &lt;code>hash_max_listpack_value&lt;/code>, it will be saved as a &lt;code>listpack&lt;/code>.
If the hash size is higher than &lt;code>hash_max_listpack_value&lt;/code>, it will create a &lt;code>dict&lt;/code> and copy
the data from &lt;code>listpack&lt;/code> to the &lt;code>dict&lt;/code>.&lt;/p></description></item><item><title>Redis Architecture</title><link>https://blog.kassiansun.com/posts/redis-architecture/</link><pubDate>Thu, 10 Nov 2022 15:21:10 +0800</pubDate><guid>https://blog.kassiansun.com/posts/redis-architecture/</guid><description>&lt;h2 id="start-up-procedures">Start-Up Procedures&lt;/h2>
&lt;ul>
&lt;li>&lt;code>spt_init&lt;/code>: This procedure initializes the process&amp;rsquo;s name and deep copy command-line arguments &amp;amp; environments.&lt;/li>
&lt;li>&lt;code>tzset&lt;/code>.&lt;/li>
&lt;li>&lt;code>zmalloc_set_oom_handler&lt;/code>&lt;/li>
&lt;li>&lt;code>init_genrand64&lt;/code> with timestamp and pid number. Code Path: &lt;code>mt19937-64.c&lt;/code>&lt;/li>
&lt;li>&lt;code>crc64_init&lt;/code>. Code Path: &lt;code>crc64.c&lt;/code>&lt;/li>
&lt;li>&lt;code>umask&lt;/code>&lt;/li>
&lt;li>&lt;code>dictSetHashFunctionSeed&lt;/code> with a random 16-byte seed. Code Path: &lt;code>dict.c&lt;/code>&lt;/li>
&lt;li>&lt;code>initServerConfig&lt;/code>&lt;/li>
&lt;li>&lt;code>ACLInit&lt;/code>. Code Path: &lt;code>acl.c&lt;/code>&lt;/li>
&lt;li>&lt;code>moduleInitModulesSystem&lt;/code>. Code Path: &lt;code>module.c&lt;/code>&lt;/li>
&lt;li>&lt;code>connTypeInitialize&lt;/code>. Code Path: &lt;code>connection.c&lt;/code>&lt;/li>
&lt;li>&lt;code>initSentinelConfig&lt;/code> and &lt;code>initSentinel&lt;/code> if the server was started in sentinel mode. Code Path: &lt;code>sentinel.c&lt;/code>&lt;/li>
&lt;li>Run &lt;code>redis_check_aof_main&lt;/code> or &lt;code>redis_check_rdb_main&lt;/code> and exit. Code Path: &lt;code>redis-check-aof.c&lt;/code>, &lt;code>redis-check-rdb.c&lt;/code>&lt;/li>
&lt;li>Parse command-line options and &lt;code>loadServerConfig&lt;/code>. Code Path: &lt;code>config.c&lt;/code>.&lt;/li>
&lt;li>&lt;code>sentinelCheckConfigFile&lt;/code> if it&amp;rsquo;s in sentinel mode. Code Path: &lt;code>sentinel.c&lt;/code>&lt;/li>
&lt;li>Check whether the server is supervised by &lt;code>upstart&lt;/code> or &lt;code>systemd&lt;/code>.&lt;/li>
&lt;li>&lt;code>daemonize&lt;/code> if required.&lt;/li>
&lt;li>&lt;code>initServer&lt;/code>. It initializes the global &lt;code>redisServer&lt;/code> structure.&lt;/li>
&lt;li>&lt;code>createPidFile&lt;/code> if required.&lt;/li>
&lt;li>&lt;code>redisSetProcTitle&lt;/code> if required.&lt;/li>
&lt;li>&lt;code>checkTcpBacklogSettings&lt;/code>.&lt;/li>
&lt;li>&lt;code>clusterInit&lt;/code> if it&amp;rsquo;s in cluster mode. Code Path: &lt;code>cluster.c&lt;/code>&lt;/li>
&lt;li>&lt;code>moduleLoadFromQueue&lt;/code>. Code Path: &lt;code>module.c&lt;/code>.&lt;/li>
&lt;li>&lt;code>ACLLoadUsersAtStartup&lt;/code>, Code path: &lt;code>acl.c&lt;/code>.&lt;/li>
&lt;li>&lt;code>initListeners&lt;/code>. Redis supports multiple types of listeners, and each one has its own accept handling logic. The listeners will be registered by &lt;code>aeCreateFileEvent&lt;/code>&lt;/li>
&lt;li>&lt;code>clusterInitListeners&lt;/code> if it&amp;rsquo;s in cluster mode. Code Path: &lt;code>cluster.c&lt;/code>&lt;/li>
&lt;li>&lt;code>bioInit&lt;/code> initializes the redis&amp;rsquo;s background I/O. Code Path: &lt;code>bio.c&lt;/code>&lt;/li>
&lt;li>&lt;code>initThreadedIO&lt;/code> initializes the threaded I/O. Code Path: &lt;code>networking.c&lt;/code>&lt;/li>
&lt;li>&lt;code>set_jemalloc_bg_thread&lt;/code>.&lt;/li>
&lt;li>If it&amp;rsquo;s not sentinel mode:
&lt;ul>
&lt;li>&lt;code>aofLoadManifestFromDisk&lt;/code>. Code Path: &lt;code>aof.c&lt;/code>&lt;/li>
&lt;li>&lt;code>loadDataFromDisk&lt;/code>. It will either load the AOF file with &lt;code>loadAppendOnlyFiles&lt;/code>, or load the RDB file with &lt;code>rdbLoad&lt;/code> and initialize the replication backlog with &lt;code>createReplicationBacklog&lt;/code>.
&lt;ul>
&lt;li>RDB Code Path: &lt;code>rdb.c&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>aofOpenIfNeededOnServerStart&lt;/code> to open the AOF file on disk. Code Path: &lt;code>aof.c&lt;/code>&lt;/li>
&lt;li>&lt;code>aofDelHistoryFiles&lt;/code> to clear the &lt;code>history_aof_list&lt;/code>. Code Path: &lt;code>aof.c&lt;/code>&lt;/li>
&lt;li>&lt;code>verifyClusterConfigWithData&lt;/code> check the cluster slots. Note that cluster mode only allows data in db 0. Code Path: &lt;code>cluster.c&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Else, do &lt;code>sentinelIsRunning&lt;/code>.&lt;/li>
&lt;li>&lt;code>redisSetCpuAffinity&lt;/code>&lt;/li>
&lt;li>&lt;code>setOOMScoreAdj&lt;/code> will update the value in &lt;code>/proc/self/oom_score_adj&lt;/code>&lt;/li>
&lt;li>&lt;code>aeMain&lt;/code> starts the event loop. &lt;code>aeDeleteEventLoop&lt;/code> after the event loop is finished. Code Path: &lt;code>ae.c&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="event-loop">Event Loop&lt;/h2>
&lt;p>&lt;code>server.el&lt;/code> got initialized during &lt;code>initServer&lt;/code>. The main event loop is created, &lt;code>serverCron&lt;/code> and &lt;code>module_pipe&lt;/code> events are registered.
&lt;code>beforeSleep&lt;/code> and &lt;code>afterSleep&lt;/code> are also configured on the event loop.&lt;/p></description></item></channel></rss>