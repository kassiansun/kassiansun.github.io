<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>go on Kassian Sun</title><link>https://kassiansun.github.io/tags/go/</link><description>Recent content in go on Kassian Sun</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Sep 2022 09:29:52 +0800</lastBuildDate><atom:link href="https://kassiansun.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Travesal Through The Go Compiler, Part 3</title><link>https://kassiansun.github.io/posts/go-source-code-part-3/</link><pubDate>Sat, 17 Sep 2022 09:29:52 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-3/</guid><description>BuildToolchain BuildToolchain is initialized as noToolchain{} by default, then it&amp;rsquo;s set dynamically to gccgo or gc. Both implementations are wrappers around the binary toolchains installed on the machine. For gc, the delegations are as follows:
BuildToolchain.gc - base.Tool(&amp;quot;compile&amp;quot;) BuildToolchain.cc - base.Tool(&amp;quot;cgo&amp;quot;). Actually cgo has been executed before the compile and cfiles has been cleared, so BuildToolchain.cc should never be called and it always returns an error. BuildToolchain.asm - base.Tool(&amp;quot;asm&amp;quot;) BuildToolchain.pack - base.</description></item><item><title>Travesal Through The Go Compiler, Part 2</title><link>https://kassiansun.github.io/posts/go-source-code-part-2/</link><pubDate>Fri, 16 Sep 2022 15:16:23 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-2/</guid><description>Builder.build Builder.build generate an archive for a single package.
Builder.build gets building information from two sources: internal/cfg package. It contains some global variables saving build flags. load.Package. It contains information for the current building package. Builder.build will build a need flag, finish the step and uncheck the finished bits one by one. Set up caching information by action, its package, and package&amp;rsquo;s target. Set up objects output directory. Setup cgo cache &amp;amp; vet cache.</description></item><item><title>Traversal Through The Go Compiler, Part 1</title><link>https://kassiansun.github.io/posts/go-source-code-part-1/</link><pubDate>Thu, 15 Sep 2022 08:48:31 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-1/</guid><description>Set Up the Environment vim-go doesn&amp;rsquo;t support travesal through the go source code, so I switch to vscode and it works out of box (with Go plugin &amp;amp;&amp;amp; gopls installed).
Start Point (go run) File: src/cmd/go/main.go Declaration: run.CmdRun Function: run.runRun Key data structures: build.Context work.Builder load.Package work.Action The runRun function will go through several stages:
Check shouldUseOutsideModuleMode. This procedure is used by go run cmd@version work.BuildInit. This will setup the build context: Initialize modload module.</description></item></channel></rss>