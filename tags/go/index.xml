<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>go on Kassian Sun</title><link>https://kassiansun.github.io/tags/go/</link><description>Recent content in go on Kassian Sun</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Oct 2022 14:42:48 +0800</lastBuildDate><atom:link href="https://kassiansun.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Runtime Implementations: Goroutines</title><link>https://kassiansun.github.io/posts/go-source-code-part-8/</link><pubDate>Wed, 12 Oct 2022 14:42:48 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-8/</guid><description>Preface Code path: src/runtime/proc.go Data structures are defined under src/runtime/runtime2.go. Concepts Copied from source code:
// G - goroutine. // M - worker thread, or machine. // P - processor, a resource that is required to execute Go code. // M must have an associated P to execute Go code, however it can be // blocked or in a syscall w/o an associated P. main Set up stack size. Fork a new m and run the sysmon function, except the wasm platform.</description></item><item><title>Go Runtime Implementations: Channel</title><link>https://kassiansun.github.io/posts/go-source-code-part-7/</link><pubDate>Thu, 29 Sep 2022 11:24:26 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-7/</guid><description>Path: src/runtime/chan.go Compilation When you make a chan with make function, the compiler will expand the expression to the makechan implementation. The actual expansion happens at cmd/compile/internal/walk/expr.go. The runtime will determine whether to use makechan or makechan64.
Type Definitions type _type _type is used as the internal representation of a go type. The same structure is defined multiple times across the go runtime. _type stores the following fields:
type chantype makechan only uses chantype.</description></item><item><title>Travesal Through The Go Compiler, Part 6</title><link>https://kassiansun.github.io/posts/go-source-code-part-6/</link><pubDate>Tue, 20 Sep 2022 10:39:15 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-6/</guid><description>ssagen.Compile Build SSA for the ir.Func (buildssa) Check ssaDump and set the dump flag. Initialize ssagen.state. Push the line number or the parent&amp;rsquo;s line number (if it&amp;rsquo;s missing) to the stack. Set up ssagen.state flags from ir.Func information. Set up an empty ssagen.ssafn with ir.Func and ABI information. Allocate the starting block for the current ssa.Func. Check open-coded defers. &amp;lt;- What&amp;rsquo;s this? Do ABIAnalyze, get the abi.ABIParamResultInfo of function in/out parameters.</description></item><item><title>Travesal Through The Go Compiler, Part 5</title><link>https://kassiansun.github.io/posts/go-source-code-part-5/</link><pubDate>Mon, 19 Sep 2022 10:54:34 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-5/</guid><description>irgen.generate Check each file&amp;rsquo;s pragma list and DeclList. Generate ir.Decl for type declarations. Generate ir.Decl for other declarations. Process later functions, this step is for the same purpose as type check. Type-check CallExpr again. Check missing function bodies. Build generic instantiations. It scans calls and generated needed methods. Remove all generic Decl&amp;rsquo;s. After irgen.generate, g.target.Decls will be the final Decl&amp;rsquo;s to generate.
enqueueFunc and compileFunctions This step is the compile step of cmd/compile, it happens after type checking and IR generation.</description></item><item><title>Travesal Through The Go Compiler, Part 4</title><link>https://kassiansun.github.io/posts/go-source-code-part-4/</link><pubDate>Sun, 18 Sep 2022 14:09:58 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-4/</guid><description>noder.LoadPackage Parsing noder.LoadPackage will call syntax.Parse to generate the syntax tree of all package files.
Initialize a compile/internal/syntax.scanner Advance scanner to the next token. Start parsing. Check the package declaration first, and take the package name from the parsed pragma. Note that the parser is expecting a ; token, but this is automatically generated at the scanner, so users don&amp;rsquo;t have to write the ;. And parsing errors will not always abort the parser loop.</description></item><item><title>Travesal Through The Go Compiler, Part 3</title><link>https://kassiansun.github.io/posts/go-source-code-part-3/</link><pubDate>Sat, 17 Sep 2022 09:29:52 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-3/</guid><description>BuildToolchain BuildToolchain is initialized as noToolchain{} by default, then it&amp;rsquo;s set dynamically to gccgo or gc. Both implementations are wrappers around the binary toolchains installed on the machine. For gc, the delegations are as follows:
BuildToolchain.gc - base.Tool(&amp;quot;compile&amp;quot;) BuildToolchain.cc - base.Tool(&amp;quot;cgo&amp;quot;). Actually cgo has been executed before the compile and cfiles has been cleared, so BuildToolchain.cc should never be called and it always returns an error. BuildToolchain.asm - base.Tool(&amp;quot;asm&amp;quot;) BuildToolchain.pack - base.</description></item><item><title>Travesal Through The Go Compiler, Part 2</title><link>https://kassiansun.github.io/posts/go-source-code-part-2/</link><pubDate>Fri, 16 Sep 2022 15:16:23 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-2/</guid><description>Builder.build Builder.build generate an archive for a single package.
Builder.build gets building information from two sources: internal/cfg package. It contains some global variables saving build flags. load.Package. It contains information for the current building package. Builder.build will build a need flag, finish the step and uncheck the finished bits one by one. Set up caching information by action, its package, and package&amp;rsquo;s target. Set up objects output directory. Setup cgo cache &amp;amp; vet cache.</description></item><item><title>Traversal Through The Go Compiler, Part 1</title><link>https://kassiansun.github.io/posts/go-source-code-part-1/</link><pubDate>Thu, 15 Sep 2022 08:48:31 +0800</pubDate><guid>https://kassiansun.github.io/posts/go-source-code-part-1/</guid><description>Set Up the Environment vim-go doesn&amp;rsquo;t support travesal through the go source code, so I switch to vscode and it works out of box (with Go plugin &amp;amp;&amp;amp; gopls installed).
Start Point (go run) File: src/cmd/go/main.go Declaration: run.CmdRun Function: run.runRun Key data structures: build.Context work.Builder load.Package work.Action The runRun function will go through several stages:
Check shouldUseOutsideModuleMode. This procedure is used by go run cmd@version work.BuildInit. This will setup the build context: Initialize modload module.</description></item></channel></rss>