<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Development on Kassian Sun</title><link>https://blog.kassiansun.com/tags/development/</link><description>Recent content in Development on Kassian Sun</description><generator>Hugo -- 0.147.3</generator><language>en</language><lastBuildDate>Wed, 08 Dec 2021 19:10:30 +0800</lastBuildDate><atom:link href="https://blog.kassiansun.com/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Fix GCC 11 Missing Headers on Mac OS Monterey</title><link>https://blog.kassiansun.com/posts/gcc-missing-headers/</link><pubDate>Wed, 08 Dec 2021 19:10:30 +0800</pubDate><guid>https://blog.kassiansun.com/posts/gcc-missing-headers/</guid><description>&lt;p>Encountered this issue trying to compile a simple &amp;ldquo;Hello World&amp;rdquo; program with &lt;code>gcc-11&lt;/code> from &lt;code>homebrew&lt;/code>.
The compiler complained about &lt;code>fatal error: _stdio.h: No such file or directory&lt;/code>. After some investigation,
this was caused by wrong building configuration for &lt;code>gcc&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc-11
COLLECT_LTO_WRAPPER=/opt/homebrew/Cellar/gcc/11.2.0_3/libexec/gcc/aarch64-apple-darwin21/11/lto-wrapper
Target: aarch64-apple-darwin21
Configured with: ../configure --prefix=/opt/homebrew/Cellar/gcc/11.2.0_3 --libdir=/opt/homebrew/Cellar/gcc/11.2.0_3/lib/gcc/11 --disable-nls --enable-checking=release --with-gcc-major-version-only --enable-languages=c,c++,objc,obj-c++,fortran --program-suffix=-11 --with-gmp=/opt/homebrew/opt/gmp --with-mpfr=/opt/homebrew/opt/mpfr --with-mpc=/opt/homebrew/opt/libmpc --with-isl=/opt/homebrew/opt/isl --with-zstd=/opt/homebrew/opt/zstd --with-pkgversion=&amp;#39;Homebrew GCC 11.2.0_3&amp;#39; --with-bugurl=https://github.com/Homebrew/homebrew-core/issues --build=aarch64-apple-darwin21 --with-system-zlib --disable-multilib --with-native-system-header-dir=/usr/include --with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 11.2.0 (Homebrew GCC 11.2.0_3)
&lt;/code>&lt;/pre>&lt;p>The &lt;code>gcc&lt;/code> from &lt;code>homebrew&lt;/code> is assuming &lt;code>--with-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX12.sdk&lt;/code>, but it doesn&amp;rsquo;t exists on Mac OS Monterey.
Instead the path is &lt;code>/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk&lt;/code>. As we now know
the root cause of this issue, fixing it will be easy:&lt;/p></description></item><item><title>Quick Start Guide with create-react-app (TypeScript + Eslint + Prettier)</title><link>https://blog.kassiansun.com/posts/create-react-app-typescript-eslint/</link><pubDate>Thu, 02 Dec 2021 12:13:43 +0800</pubDate><guid>https://blog.kassiansun.com/posts/create-react-app-typescript-eslint/</guid><description>&lt;h2 id="why-use-create-react-app">Why use &lt;code>create-react-app&lt;/code>&lt;/h2>
&lt;p>Originally I was using a manually written webpack script to build my react project. The reason
was to reduce the length of &lt;code>package-lock.json&lt;/code>. But as I&amp;rsquo;m diving deeper into the frontend ecosystem,
it doesn&amp;rsquo;t look like a good choice to wait for frontend guys fixing the dependency hell. So instead
of waiting for a neat solution, I need to find a quick solution.&lt;/p>
&lt;p>As part of the lessons I learned from handwriting webpack scripts, it&amp;rsquo;s hard to build a complete
and reusable scaffold to build a React.js + TypeScript + ESLint project. &lt;code>create-react-app&lt;/code> is good
enough with only minimal extra configurations. This blog is mainly a note on how to quickly start
another project later.&lt;/p></description></item><item><title>Migrate From Bash to Zsh</title><link>https://blog.kassiansun.com/posts/migrate-from-bash-to-zsh/</link><pubDate>Sun, 28 Nov 2021 10:14:21 +0800</pubDate><guid>https://blog.kassiansun.com/posts/migrate-from-bash-to-zsh/</guid><description>&lt;h2 id="the-story-of-bash-and-my-taste-on-command-line">The story of bash and my taste on command line&lt;/h2>
&lt;p>I&amp;rsquo;ve been using &lt;code>bash&lt;/code> as the development environment for a long time. The reason for choosing &lt;code>bash&lt;/code> is its ubiquity.
Most desktop &amp;amp; server Linux distributions and Docker images will ship with bash, which makes it a great fit for a
configure-once-use-everywhere development environment. So you write it once and copy it to every host you&amp;rsquo;ll write
code on. But since ~2014 my bash configuration has degraded several times, for two major reasons:&lt;/p></description></item></channel></rss>